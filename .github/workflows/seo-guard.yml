name: SEO Guard

on:
  workflow_dispatch:
  schedule:
    - cron: "23 3 * * *"
  push:
    paths:
      - "docs/**"
      - ".github/workflows/seo-guard.yml"

permissions:
  contents: write
  pull-requests: write

jobs:
  guard:
    runs-on: ubuntu-latest
    env:
      SITE_BASE: https://origamihase.github.io/wien-oepnv
      DESC: Konsolidierter RSS-Feed für Störungen und Baustellenmeldungen im Wiener ÖPNV (WL/ÖBB/VOR), inkl. Doku & Open-Data-Workflows.
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Apply idempotent SEO fixes
        id: seo
        shell: bash
        run: |
          set -euo pipefail
          changed=false

          # --- sitemap.xml: Canonicals ---
          if [[ -f docs/sitemap.xml ]]; then
            before="$(sha1sum docs/sitemap.xml | awk '{print $1}')"
            sed -E -i \
              -e 's#<loc>https://wien-oepnv\.github\.io/?</loc>#<loc>'"$SITE_BASE"'/</loc>#g' \
              -e 's#<loc>https://origamihase\.github\.io/wien-oepnv/?</loc>#<loc>'"$SITE_BASE"'/</loc>#g' \
              -e 's#<loc>https://wien-oepnv\.github\.io/feed\.xml</loc>#<loc>'"$SITE_BASE"'/feed.xml</loc>#g' \
              -e 's#<loc>https://origamihase\.github\.io/wien-oepnv/feed\.xml</loc>#<loc>'"$SITE_BASE"'/feed.xml</loc>#g' \
              -e 's#<loc>https://wien-oepnv\.github\.io/docs/how-to/?</loc>#<loc>'"$SITE_BASE"'/docs/how-to/</loc>#g' \
              -e 's#<loc>https://origamihase\.github\.io/wien-oepnv/docs/how-to/?</loc>#<loc>'"$SITE_BASE"'/docs/how-to/</loc>#g' \
              -e 's#<loc>https://wien-oepnv\.github\.io/docs/reference/?</loc>#<loc>'"$SITE_BASE"'/docs/reference/</loc>#g' \
              -e 's#<loc>https://origamihase\.github\.io/wien-oepnv/docs/reference/?</loc>#<loc>'"$SITE_BASE"'/docs/reference/</loc>#g' \
              docs/sitemap.xml
            after="$(sha1sum docs/sitemap.xml | awk '{print $1}')"
            [[ "$before" != "$after" ]] && changed=true
          fi

          # --- robots.txt: Einrückungen entfernen & genau EINE Sitemap-Zeile ---
          if [[ -f docs/robots.txt ]]; then
            before="$(sha1sum docs/robots.txt | awk '{print $1}')"
            # führende Leerzeichen in jeder Zeile entfernen
            sed -E -i 's/^[[:space:]]+//g' docs/robots.txt
            # alle vorhandenen Sitemap-Zeilen entfernen und eine normierte Zeile setzen
            sed -E -i '/^[[:space:]]*Sitemap:/d' docs/robots.txt
            printf 'Sitemap: %s/sitemap.xml\n' "$SITE_BASE" >> docs/robots.txt
            after="$(sha1sum docs/robots.txt | awk '{print $1}')"
            [[ "$before" != "$after" ]] && changed=true
          fi

          # --- feed.xml: global dedupe & SEO-Tags ---
          if [[ -f docs/feed.xml ]]; then
            before="$(sha1sum docs/feed.xml | awk '{print $1}')"

            perl -0777 -i -pe '
              my $base = $ENV{"SITE_BASE"} // "https://origamihase.github.io/wien-oepnv";
              my $s = $_;
              # Atom-Namespace ergänzen (nur wenn fehlt)
              $s =~ s{<rss\b(?![^>]*\bxmlns:atom=)}{<rss xmlns:atom="http://www.w3.org/2005/Atom" }s;
              # Nach </description> stets einen Zeilenumbruch erzwingen
              $s =~ s{</description>\s*}{</description>\n}s;
              # Sprache einfügen, falls nicht vorhanden
              if ($s !~ m{<language>de</language>}s) {
                $s =~ s{(</description>\n)}{$1    <language>de</language>\n}s;
              }
              # Alle bestehenden atom:link-Tags global entfernen
              $s =~ s{\n[ \t]*<atom:link\b[^>]*?/>\s*}{}gs;
              # Genau zwei normierte Links (alternate & self) direkt nach </description> einsetzen
              $s =~ s{(</description>\n)}{$1    <atom:link rel="alternate" type="text/html" href="$base/"/>\n    <atom:link rel="self" type="application/rss+xml" href="$base/feed.xml"/>\n}s;
              $_ = $s;
            ' docs/feed.xml

            after="$(sha1sum docs/feed.xml | awk '{print $1}')"
            [[ "$before" != "$after" ]] && changed=true
          fi

          echo "changed=${changed}" >> "$GITHUB_OUTPUT"

      - name: Commit & push, or open PR if branch protected
        if: steps.seo.outputs.changed == 'true'
        id: publish
        env:
          GH_TOKEN: ${{ github.token }}
        shell: bash
        run: |
          set -euo pipefail
          git config user.name  "seo-bot"
          git config user.email "seo-bot@users.noreply.github.com"
          DEF="$(git remote show origin | awk '/HEAD branch/ {print $NF}')"
          CUR="$(git rev-parse --abbrev-ref HEAD || true)"
          BRANCH="${CUR:-$DEF}"
          git add -A
          git commit -m "chore(seo): robots formatting & single sitemap; global dedupe in feed; canonical URLs"
          if git push origin "HEAD:${BRANCH}"; then
            echo "mode=direct" >> "$GITHUB_OUTPUT"
          else
            echo "Branch protection active, creating PR..."
            PRB="seo/fix-robots-feed-canonicals"
            git checkout -b "$PRB"
            git push origin "HEAD:$PRB"
            OWNER_REPO="${{ github.repository }}"
            BASE="$DEF"
            BODY=$'Fix: robots.txt ohne Einrückungen, exakte Sitemap-Zeile; Feed: global dedupe und Atom-Tags; Canonicals in sitemap.'
            curl -sS -H "Authorization: Bearer ${GH_TOKEN}" \
                 -H "Accept: application/vnd.github+json" \
                 -X POST "https://api.github.com/repos/${OWNER_REPO}/pulls" \
                 -d "$(printf '{ "title": %q, "head": %q, "base": %q, "body": %q }' \
                          "SEO: Robots & Feed Dedupe + Canonical Fixes" "$PRB" "$BASE" "$BODY")" >/dev/null
            echo "mode=pr" >> "$GITHUB_OUTPUT"
          fi

      - name: Update repository metadata via PAT (description & homepage)
        env:
          ADMIN_TOKEN: ${{ secrets.REPO_ADMIN_TOKEN }}
          SITE_BASE: ${{ env.SITE_BASE }}
          DESC: ${{ env.DESC }}
        shell: bash
        run: |
          set -euo pipefail
          if [[ -z "${ADMIN_TOKEN:-}" ]]; then
            echo "REPO_ADMIN_TOKEN fehlt – Metadaten können nicht gesetzt werden." >&2
            exit 0
          fi
          OWNER_REPO="${{ github.repository }}"
          curl -sS -H "Authorization: Bearer ${ADMIN_TOKEN}" \
               -H "Accept: application/vnd.github+json" \
               -X PATCH "https://api.github.com/repos/${OWNER_REPO}" \
               -d "$(printf '{"description":%q,"homepage":%q}' "${DESC}" "${SITE_BASE}/")" >/dev/null

      - name: Verify feed file (repo) – exactly one self & one alternate
        shell: bash
        run: |
          set -euo pipefail
          test "$(grep -c 'atom:link[^>]*rel=\"self\"' docs/feed.xml)" -eq 1
          test "$(grep -c 'atom:link[^>]*rel=\"alternate\"' docs/feed.xml)" -eq 1
          grep -q '<language>de</language>' docs/feed.xml
          grep -q 'xmlns:atom=' docs/feed.xml

      - name: Verify published feed (best-effort; allow Pages delay)
        shell: bash
        run: |
          set -euo pipefail
          for i in {1..6}; do
            if curl -fsSL "${{ env.SITE_BASE }}/feed.xml" -o /tmp/pub.xml; then
              if grep -q '<language>de</language>' /tmp/pub.xml \
                 && [ "$(grep -c 'atom:link[^>]*rel=\"self\"' /tmp/pub.xml)" -eq 1 ] \
                 && [ "$(grep -c 'atom:link[^>]*rel=\"alternate\"' /tmp/pub.xml)" -eq 1 ]; then
                echo "Published feed OK"
                exit 0
              fi
            fi
            sleep 10
          done
          echo "WARN: Published feed noch nicht synchron; Repository-Datei ist korrekt."
