name: SEO Guard

on:
  workflow_dispatch:
  schedule:
    - cron: "23 3 * * *"
  push:
    paths:
      - "docs/**"
      - ".github/workflows/seo-guard.yml"

permissions:
  contents: write
  pull-requests: write

jobs:
  guard:
    runs-on: ubuntu-latest
    env:
      SITE_BASE: https://origamihase.github.io/wien-oepnv
      DESC: Konsolidierter RSS-Feed für Störungen und Baustellenmeldungen im Wiener ÖPNV (WL/ÖBB/VOR), inkl. Doku & Open-Data-Workflows.
      TOPICS_JSON: '["wien","oepnv","public-transport","rss-feed","open-data","verkehrsmeldungen","tram","bus","train"]'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Apply idempotent SEO fixes (sitemap/robots/feed)
        id: seo
        shell: bash
        run: |
          set -euo pipefail
          changed=false

          # --- sitemap.xml: Canonicals ---
          if [[ -f docs/sitemap.xml ]]; then
            before="$(sha1sum docs/sitemap.xml | awk '{print $1}')"
            sed -E -i \
              -e 's#<loc>https://wien-oepnv\.github\.io/?</loc>#<loc>'"$SITE_BASE"'/</loc>#g' \
              -e 's#<loc>https://origamihase\.github\.io/wien-oepnv/?</loc>#<loc>'"$SITE_BASE"'/</loc>#g' \
              -e 's#<loc>https://wien-oepnv\.github\.io/feed\.xml</loc>#<loc>'"$SITE_BASE"'/feed.xml</loc>#g' \
              -e 's#<loc>https://origamihase\.github\.io/wien-oepnv/feed\.xml</loc>#<loc>'"$SITE_BASE"'/feed.xml</loc>#g' \
              -e 's#<loc>https://wien-oepnv\.github\.io/docs/how-to/?</loc>#<loc>'"$SITE_BASE"'/docs/how-to/</loc>#g' \
              -e 's#<loc>https://origamihase\.github\.io/wien-oepnv/docs/how-to/?</loc>#<loc>'"$SITE_BASE"'/docs/how-to/</loc>#g' \
              -e 's#<loc>https://wien-oepnv\.github\.io/docs/reference/?</loc>#<loc>'"$SITE_BASE"'/docs/reference/</loc>#g' \
              -e 's#<loc>https://origamihase\.github\.io/wien-oepnv/docs/reference/?</loc>#<loc>'"$SITE_BASE"'/docs/reference/</loc>#g' \
              docs/sitemap.xml
            after="$(sha1sum docs/sitemap.xml | awk '{print $1}')"
            [[ "$before" != "$after" ]] && changed=true
          fi

          # --- robots.txt: Sitemap ---
          if [[ -f docs/robots.txt ]]; then
            before="$(sha1sum docs/robots.txt | awk '{print $1}')"
            # Einheitliche, nicht eingerückte Zeilen
            sed -E -i 's/^[[:space:]]+User-agent:/User-agent:/; s/^[[:space:]]+Allow:/Allow:/' docs/robots.txt || true
            if grep -Eq '^[[:space:]]*Sitemap:' docs/robots.txt; then
              sed -E -i 's#^[[:space:]]*Sitemap:.*#Sitemap: '"$SITE_BASE"'/sitemap.xml#g' docs/robots.txt
            else
              printf 'Sitemap: %s/sitemap.xml\n' "$SITE_BASE" >> docs/robots.txt
            fi
            after="$(sha1sum docs/robots.txt | awk '{print $1}')"
            [[ "$before" != "$after" ]] && changed=true
          fi

          # --- feed.xml: xmlns:atom, language, atom:links (multiline-safe) ---
          if [[ -f docs/feed.xml ]]; then
            before="$(sha1sum docs/feed.xml | awk '{print $1}')"

            # 1) xmlns:atom nur ergänzen, wenn nicht vorhanden
            perl -0777 -pe 's|<rss\b(?![^>]*\bxmlns:atom=)|<rss xmlns:atom="http://www.w3.org/2005/Atom" |s' -i docs/feed.xml

            # 2) <language>de</language> nach <description> nur wenn fehlt
            if ! grep -q '<language>de</language>' docs/feed.xml; then
              awk '
                /<description>/ && !done { print; print "    <language>de</language>"; done=1; next }
                { print }
              ' docs/feed.xml > docs/feed.xml.tmp && mv docs/feed.xml.tmp docs/feed.xml
            fi

            # 3) atom:link rel="self" nur wenn fehlt
            if ! grep -q 'atom:link[^>]*rel="self"[^>]*origamihase.github.io/wien-oepnv/feed.xml' docs/feed.xml; then
              awk '
                /<description>/ && !sdone { print; print "    <atom:link rel=\"self\" type=\"application/rss+xml\" href=\"'"$SITE_BASE"'/feed.xml\"/>"; sdone=1; next }
                { print }
              ' docs/feed.xml > docs/feed.xml.tmp && mv docs/feed.xml.tmp docs/feed.xml
            fi

            # 4) atom:link rel="alternate" nur wenn fehlt
            if ! grep -q 'atom:link[^>]*rel="alternate"[^>]*origamihase.github.io/wien-oepnv/?' docs/feed.xml; then
              awk '
                /<description>/ && !adone { print; print "    <atom:link rel=\"alternate\" type=\"text/html\" href=\"'"$SITE_BASE"'/\"/>"; adone=1; next }
                { print }
              ' docs/feed.xml > docs/feed.xml.tmp && mv docs/feed.xml.tmp docs/feed.xml
            fi

            after="$(sha1sum docs/feed.xml | awk '{print $1}')"
            [[ "$before" != "$after" ]] && changed=true
          fi

          echo "changed=${changed}" >> "$GITHUB_OUTPUT"

      - name: Commit & push, or open PR if branch protected
        if: steps.seo.outputs.changed == 'true'
        id: publish
        env:
          GH_TOKEN: ${{ github.token }}
        shell: bash
        run: |
          set -euo pipefail
          git config user.name  "seo-bot"
          git config user.email "seo-bot@users.noreply.github.com"
          DEF="$(git remote show origin | awk '/HEAD branch/ {print $NF}')"
          CUR="$(git rev-parse --abbrev-ref HEAD || true)"
          BRANCH="${CUR:-$DEF}"
          git add -A
          git commit -m "chore(seo): feed atom links + language; sitemap/robots canonicals"
          if git push origin "HEAD:${BRANCH}"; then
            echo "mode=direct" >> "$GITHUB_OUTPUT"
          else
            echo "Branch protection active, creating PR..."
            PRB="seo/fix-domain-sitemap-robots-feed"
            git checkout -b "$PRB"
            git push origin "HEAD:$PRB"
            OWNER_REPO="${{ github.repository }}"
            BASE="$DEF"
            BODY=$'Fix: Canonicals in sitemap/robots; Feed: language=de, Atom self/alternate + xmlns:atom. Idempotent.'
            curl -sS -H "Authorization: Bearer ${GH_TOKEN}" \
                 -H "Accept: application/vnd.github+json" \
                 -X POST "https://api.github.com/repos/${OWNER_REPO}/pulls" \
                 -d "$(printf '{ "title": %q, "head": %q, "base": %q, "body": %q }' \
                          "SEO: Canonicals + Atom-Links im RSS-Feed" "$PRB" "$BASE" "$BODY")" >/dev/null
            echo "mode=pr" >> "$GITHUB_OUTPUT"
          fi

      - name: Update repository metadata (desc/homepage/topics) via PAT
        env:
          ADMIN_TOKEN: ${{ secrets.REPO_ADMIN_TOKEN }}
          SITE_BASE: ${{ env.SITE_BASE }}
          DESC: ${{ env.DESC }}
          TOPICS_JSON: ${{ env.TOPICS_JSON }}
        shell: bash
        run: |
          set -euo pipefail
          if [[ -z "${ADMIN_TOKEN:-}" ]]; then
            echo "REPO_ADMIN_TOKEN fehlt – überspringe Metadaten-Update." >&2
            exit 0
          fi
          OWNER_REPO="${{ github.repository }}"
          # Beschreibung + Homepage
          curl -sS -H "Authorization: Bearer ${ADMIN_TOKEN}" \
               -H "Accept: application/vnd.github+json" \
               -X PATCH "https://api.github.com/repos/${OWNER_REPO}" \
               -d "$(printf '{"description":%q,"homepage":%q}' "${DESC}" "${SITE_BASE}/")" >/dev/null
          # Topics (ersetzen)
          curl -sS -H "Authorization: Bearer ${ADMIN_TOKEN}" \
               -H "Accept: application/vnd.github+json" \
               -H "Content-Type: application/json" \
               -X PUT "https://api.github.com/repos/${OWNER_REPO}/topics" \
               -d "{\"names\": ${TOPICS_JSON} }" >/dev/null

      - name: Verify published feed contains SEO tags
        shell: bash
        run: |
          set -euo pipefail
          curl -fsSL "${{ env.SITE_BASE }}/feed.xml" -o /tmp/feed.xml
          grep -q '<language>de</language>' /tmp/feed.xml
          grep -q 'atom:link[^>]*rel="self"' /tmp/feed.xml
          grep -q 'atom:link[^>]*rel="alternate"' /tmp/feed.xml

      - name: Summary
        shell: bash
        run: |
          echo "SEO Guard abgeschlossen."
          echo "Änderungen angewendet:  ${{ steps.seo.outputs.changed }}"
          echo "Veröffentlichungsmodus:  ${{ steps.publish.outputs.mode || 'none' }}"
